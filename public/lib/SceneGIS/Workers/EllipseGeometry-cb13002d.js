/**
 * @license
 * SceneGIS - https://github.com/CesiumGS/cesium
 * Version 1.97
 *
 * Copyright 2011-2022 SceneGIS Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/CesiumGS/cesium/blob/main/LICENSE.md for full licensing details.
 */
define(["exports","./Transforms-38ce56dd","./Matrix2-dca1b63d","./Matrix3-fe947601","./ComponentDatatype-f194b981","./defaultValue-192c850d","./EllipseGeometryLibrary-ca4db843","./GeometryAttribute-440d2d6c","./GeometryAttributes-fcaeebba","./GeometryInstance-9303500e","./GeometryOffsetAttribute-817c59a7","./GeometryPipeline-cdde424d","./IndexDatatype-1ff811be","./Math-be2c8494","./VertexFormat-d2271f13"],(function(e,t,i,n,a,r,o,s,l,u,m,c,p,d,y){"use strict";const f=new n.Cartesian3,h=new n.Cartesian3,A=new n.Cartesian3,x=new n.Cartesian3,g=new i.Cartesian2,_=new n.Matrix3,b=new n.Matrix3,w=new t.Quaternion,C=new n.Cartesian3,M=new n.Cartesian3,V=new n.Cartesian3,E=new n.Cartographic,I=new n.Cartesian3,N=new i.Cartesian2,T=new i.Cartesian2;function G(e,u,c){const p=u.vertexFormat,d=u.center,y=u.semiMajorAxis,x=u.semiMinorAxis,G=u.ellipsoid,P=u.stRotation,v=c?e.length/3*2:e.length/3,F=u.shadowVolume,D=u.planeView,S=p.st?new Float32Array(2*v):void 0,O=p.normal?new Float32Array(3*v):void 0,L=p.tangent?new Float32Array(3*v):void 0,R=p.bitangent?new Float32Array(3*v):void 0,j=F?new Float32Array(3*v):void 0;let B=0,z=C,k=M,Y=V;const U=new t.GeographicProjection(G);let H;H=r.defined(D)&&!0===D?d.clone(I):U.project(G.cartesianToCartographic(d,E),I);let Q=new n.Cartesian3;!0===D?(d.clone(f),Q=new n.Cartesian3(0,0,1)):(Q=G.scaleToGeodeticSurface(d,f),G.geodeticSurfaceNormal(Q,Q));let W=_,J=b;if(0!==P){let e=t.Quaternion.fromAxisAngle(Q,P,w);W=n.Matrix3.fromQuaternion(e,W),e=t.Quaternion.fromAxisAngle(Q,-P,w),J=n.Matrix3.fromQuaternion(e,J)}else W=n.Matrix3.clone(n.Matrix3.IDENTITY,W),J=n.Matrix3.clone(n.Matrix3.IDENTITY,J);const X=i.Cartesian2.fromElements(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,N),q=i.Cartesian2.fromElements(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,T);let Z=e.length;const K=c?Z:0,$=K/3*2;for(let t=0;t<Z;t+=3){const i=t+1,a=t+2,o=n.Cartesian3.fromArray(e,t,f);if(p.st){const e=n.Matrix3.multiplyByVector(W,o,h);let t;r.defined(D)&&!0===D?(e.clone(E),t=e.clone(A)):t=U.project(G.cartesianToCartographic(e,E),A),n.Cartesian3.subtract(t,H,t),g.x=(t.x+y)/(2*y),g.y=(t.y+x)/(2*x),X.x=Math.min(g.x,X.x),X.y=Math.min(g.y,X.y),q.x=Math.max(g.x,q.x),q.y=Math.max(g.y,q.y),c&&(S[B+$]=g.x,S[B+1+$]=g.y),S[B++]=g.x,S[B++]=g.y}(p.normal||p.tangent||p.bitangent||F)&&(z=!0===D?new n.Cartesian3(0,0,1):G.geodeticSurfaceNormal(o,z),F&&(j[t+K]=-z.x,j[i+K]=-z.y,j[a+K]=-z.z),(p.normal||p.tangent||p.bitangent)&&((p.tangent||p.bitangent)&&(k=n.Cartesian3.normalize(n.Cartesian3.cross(n.Cartesian3.UNIT_Z,z,k),k),n.Matrix3.multiplyByVector(J,k,k)),p.normal&&(O[t]=z.x,O[i]=z.y,O[a]=z.z,c&&(O[t+K]=-z.x,O[i+K]=-z.y,O[a+K]=-z.z)),p.tangent&&(L[t]=k.x,L[i]=k.y,L[a]=k.z,c&&(L[t+K]=-k.x,L[i+K]=-k.y,L[a+K]=-k.z)),p.bitangent&&(Y=n.Cartesian3.normalize(n.Cartesian3.cross(z,k,Y),Y),R[t]=Y.x,R[i]=Y.y,R[a]=Y.z,c&&(R[t+K]=Y.x,R[i+K]=Y.y,R[a+K]=Y.z))))}if(p.st){Z=S.length;for(let e=0;e<Z;e+=2)S[e]=(S[e]-X.x)/(q.x-X.x),S[e+1]=(S[e+1]-X.y)/(q.y-X.y)}const ee=new l.GeometryAttributes;if(p.position){const t=o.EllipseGeometryLibrary.raisePositionsToHeight(e,u,c,D);ee.position=new s.GeometryAttribute({componentDatatype:a.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:t})}if(p.st&&(ee.st=new s.GeometryAttribute({componentDatatype:a.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:S})),p.normal&&(ee.normal=new s.GeometryAttribute({componentDatatype:a.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:O})),p.tangent&&(ee.tangent=new s.GeometryAttribute({componentDatatype:a.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:L})),p.bitangent&&(ee.bitangent=new s.GeometryAttribute({componentDatatype:a.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:R})),F&&(ee.extrudeDirection=new s.GeometryAttribute({componentDatatype:a.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:j})),c&&r.defined(u.offsetAttribute)){let e=new Uint8Array(v);if(u.offsetAttribute===m.GeometryOffsetAttribute.TOP)e=e.fill(1,0,v/2);else{const t=u.offsetAttribute===m.GeometryOffsetAttribute.NONE?0:1;e=e.fill(t)}ee.applyOffset=new s.GeometryAttribute({componentDatatype:a.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:e})}return ee}function P(e){const t=new Array(e*(e+1)*12-6);let i,n,a,r,o,s=0;for(i=0,a=1,r=0;r<3;r++)t[s++]=a++,t[s++]=i,t[s++]=a;for(r=2;r<e+1;++r){for(a=r*(r+1)-1,i=(r-1)*r-1,t[s++]=a++,t[s++]=i,t[s++]=a,n=2*r,o=0;o<n-1;++o)t[s++]=a,t[s++]=i++,t[s++]=i,t[s++]=a++,t[s++]=i,t[s++]=a;t[s++]=a++,t[s++]=i,t[s++]=a}for(n=2*e,++a,++i,r=0;r<n-1;++r)t[s++]=a,t[s++]=i++,t[s++]=i,t[s++]=a++,t[s++]=i,t[s++]=a;for(t[s++]=a,t[s++]=i++,t[s++]=i,t[s++]=a++,t[s++]=i++,t[s++]=i,++i,r=e-1;r>1;--r){for(t[s++]=i++,t[s++]=i,t[s++]=a,n=2*r,o=0;o<n-1;++o)t[s++]=a,t[s++]=i++,t[s++]=i,t[s++]=a++,t[s++]=i,t[s++]=a;t[s++]=i++,t[s++]=i++,t[s++]=a++}for(r=0;r<3;r++)t[s++]=i++,t[s++]=i,t[s++]=a;return t}let v=new n.Cartesian3;const F=new t.BoundingSphere,D=new t.BoundingSphere;function S(e){const d=e.center,y=e.ellipsoid,b=e.semiMajorAxis,v=e.planeView;let S;S=!0!==v?n.Cartesian3.multiplyByScalar(y.geodeticSurfaceNormal(d,f),e.height,f):n.Cartesian3.multiplyByScalar(new n.Cartesian3(0,0,1),e.height,f),F.center=n.Cartesian3.add(d,S,F.center),F.radius=b,S=!0!==v?n.Cartesian3.multiplyByScalar(y.geodeticSurfaceNormal(d,S),e.extrudedHeight,S):n.Cartesian3.multiplyByScalar(new n.Cartesian3(0,0,1),e.extrudedHeight,S),D.center=n.Cartesian3.add(d,S,D.center),D.radius=b;const O=o.EllipseGeometryLibrary.computeEllipsePositions(e,!0,!0),L=O.positions,R=O.numPts,j=O.outerPositions,B=t.BoundingSphere.union(F,D),z=G(L,e,!0);let k=P(R);const Y=k.length;k.length=2*Y;const U=L.length/3;for(let e=0;e<Y;e+=3)k[e+Y]=k[e+2]+U,k[e+1+Y]=k[e+1]+U,k[e+2+Y]=k[e]+U;const H=p.IndexDatatype.createTypedArray(2*U/3,k),Q=new s.Geometry({attributes:z,indices:H,primitiveType:s.PrimitiveType.TRIANGLES}),W=function(e,o){const u=o.vertexFormat,c=o.center,p=o.semiMajorAxis,d=o.semiMinorAxis,y=o.ellipsoid,b=o.height,G=o.extrudedHeight,P=o.stRotation,v=e.length/3*2,F=o.planeView,D=new Float64Array(3*v),S=u.st?new Float32Array(2*v):void 0,O=u.normal?new Float32Array(3*v):void 0,L=u.tangent?new Float32Array(3*v):void 0,R=u.bitangent?new Float32Array(3*v):void 0,j=o.shadowVolume,B=j?new Float32Array(3*v):void 0;let z=0,k=C,Y=M,U=V;const H=new t.GeographicProjection(y);let Q;Q=r.defined(F)&&!0===F?c.clone(I):H.project(y.cartesianToCartographic(c,E,F),I);let W=new n.Cartesian3;!0===F?W=new n.Cartesian3(0,0,1):(W=y.scaleToGeodeticSurface(c,f),y.geodeticSurfaceNormal(W,W));const J=t.Quaternion.fromAxisAngle(W,P,w),X=n.Matrix3.fromQuaternion(J,_),q=i.Cartesian2.fromElements(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,N),Z=i.Cartesian2.fromElements(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,T);let K=e.length;const $=K/3*2;for(let t=0;t<K;t+=3){const i=t+1,a=t+2;let o,s=n.Cartesian3.fromArray(e,t,f);if(u.st){const e=n.Matrix3.multiplyByVector(X,s,h);let t;t=r.defined(F)&&!0===F?e.clone(A):H.project(y.cartesianToCartographic(e,E,F),A),n.Cartesian3.subtract(t,Q,t),g.x=(t.x+p)/(2*p),g.y=(t.y+d)/(2*d),q.x=Math.min(g.x,q.x),q.y=Math.min(g.y,q.y),Z.x=Math.max(g.x,Z.x),Z.y=Math.max(g.y,Z.y),S[z+$]=g.x,S[z+1+$]=g.y,S[z++]=g.x,S[z++]=g.y}r.defined(F)&&!1!==F||(s=y.scaleToGeodeticSurface(s,s)),o=n.Cartesian3.clone(s,h),k=r.defined(F)&&!1!==F?new n.Cartesian3(0,0,1):y.geodeticSurfaceNormal(s,k),j&&(B[t+K]=-k.x,B[i+K]=-k.y,B[a+K]=-k.z);let l=n.Cartesian3.multiplyByScalar(k,b,x);if(s=n.Cartesian3.add(s,l,s),l=n.Cartesian3.multiplyByScalar(k,G,l),o=n.Cartesian3.add(o,l,o),u.position&&(D[t+K]=o.x,D[i+K]=o.y,D[a+K]=o.z,D[t]=s.x,D[i]=s.y,D[a]=s.z),u.normal||u.tangent||u.bitangent){U=n.Cartesian3.clone(k,U);const r=n.Cartesian3.fromArray(e,(t+3)%K,x);n.Cartesian3.subtract(r,s,r);const l=n.Cartesian3.subtract(o,s,A);k=n.Cartesian3.normalize(n.Cartesian3.cross(l,r,k),k),u.normal&&(O[t]=k.x,O[i]=k.y,O[a]=k.z,O[t+K]=k.x,O[i+K]=k.y,O[a+K]=k.z),u.tangent&&(Y=n.Cartesian3.normalize(n.Cartesian3.cross(U,k,Y),Y),L[t]=Y.x,L[i]=Y.y,L[a]=Y.z,L[t+K]=Y.x,L[t+1+K]=Y.y,L[t+2+K]=Y.z),u.bitangent&&(R[t]=U.x,R[i]=U.y,R[a]=U.z,R[t+K]=U.x,R[i+K]=U.y,R[a+K]=U.z)}}if(u.st){K=S.length;for(let e=0;e<K;e+=2)S[e]=(S[e]-q.x)/(Z.x-q.x),S[e+1]=(S[e+1]-q.y)/(Z.y-q.y)}const ee=new l.GeometryAttributes;if(u.position&&(ee.position=new s.GeometryAttribute({componentDatatype:a.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:D})),u.st&&(ee.st=new s.GeometryAttribute({componentDatatype:a.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:S})),u.normal&&(ee.normal=new s.GeometryAttribute({componentDatatype:a.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:O})),u.tangent&&(ee.tangent=new s.GeometryAttribute({componentDatatype:a.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:L})),u.bitangent&&(ee.bitangent=new s.GeometryAttribute({componentDatatype:a.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:R})),j&&(ee.extrudeDirection=new s.GeometryAttribute({componentDatatype:a.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:B})),r.defined(o.offsetAttribute)){let e=new Uint8Array(v);if(o.offsetAttribute===m.GeometryOffsetAttribute.TOP)e=e.fill(1,0,v/2);else{const t=o.offsetAttribute===m.GeometryOffsetAttribute.NONE?0:1;e=e.fill(t)}ee.applyOffset=new s.GeometryAttribute({componentDatatype:a.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:e})}return ee}(j,e);k=function(e){const t=e.length/3,i=p.IndexDatatype.createTypedArray(t,6*t);let n=0;for(let e=0;e<t;e++){const a=e,r=e+t,o=(a+1)%t,s=o+t;i[n++]=a,i[n++]=r,i[n++]=o,i[n++]=o,i[n++]=r,i[n++]=s}return i}(j);const J=p.IndexDatatype.createTypedArray(2*j.length/3,k),X=new s.Geometry({attributes:W,indices:J,primitiveType:s.PrimitiveType.TRIANGLES}),q=c.GeometryPipeline.combineInstances([new u.GeometryInstance({geometry:Q}),new u.GeometryInstance({geometry:X})]);return{boundingSphere:B,attributes:q[0].attributes,indices:q[0].indices}}function O(e,t,a,s,l,u,m,c){const p=o.EllipseGeometryLibrary.computeEllipsePositions({center:e,semiMajorAxis:t,semiMinorAxis:a,rotation:s,granularity:l,planeView:c},!1,!0).outerPositions,y=p.length/3,f=new Array(y);for(let e=0;e<y;++e)f[e]=n.Cartesian3.fromArray(p,3*e);if(r.defined(c)&&!0===c){const e={west:0,east:0,south:0,north:0,width:0,height:0};let t=Number.MAX_VALUE,i=Number.MIN_VALUE,n=Number.MAX_VALUE,a=Number.MIN_VALUE;return f.forEach((e=>{t=Math.min(t,e.x),i=Math.max(i,e.x),n=Math.min(n,e.y),a=Math.max(a,e.y)})),e.west=t,e.south=n,e.east=i,e.north=a,e.width=e.east-e.west,e.height=e.north-e.south,e._planeView=!0,e}const h=i.Rectangle.fromCartesianArray(f,u,m);return h.width>d.CesiumMath.PI&&(h.north=h.north>0?d.CesiumMath.PI_OVER_TWO-d.CesiumMath.EPSILON7:h.north,h.south=h.south<0?d.CesiumMath.EPSILON7-d.CesiumMath.PI_OVER_TWO:h.south,h.east=d.CesiumMath.PI,h.west=-d.CesiumMath.PI),h}function L(e){const t=(e=r.defaultValue(e,r.defaultValue.EMPTY_OBJECT)).center,i=r.defaultValue(e.ellipsoid,n.Ellipsoid.WGS84),a=e.semiMajorAxis,o=e.semiMinorAxis,s=r.defaultValue(e.granularity,d.CesiumMath.RADIANS_PER_DEGREE),l=r.defaultValue(e.planeView,!1),u=r.defaultValue(e.vertexFormat,y.VertexFormat.DEFAULT),m=r.defaultValue(e.height,0),c=r.defaultValue(e.extrudedHeight,m);this._center=n.Cartesian3.clone(t),this._semiMajorAxis=a,this._semiMinorAxis=o,this._ellipsoid=n.Ellipsoid.clone(i),this._rotation=r.defaultValue(e.rotation,0),this._stRotation=r.defaultValue(e.stRotation,0),this._height=Math.max(c,m),this._granularity=s,this._vertexFormat=y.VertexFormat.clone(u),this._extrudedHeight=Math.min(c,m),this._shadowVolume=r.defaultValue(e.shadowVolume,!1),this._workerName="createEllipseGeometry",this._offsetAttribute=e.offsetAttribute,this._rectangle=void 0,this._textureCoordinateRotationPoints=void 0,this._planeView=l,this._totalPositions=void 0}L.packedLength=n.Cartesian3.packedLength+n.Ellipsoid.packedLength+y.VertexFormat.packedLength+9,L.pack=function(e,t,i){return i=r.defaultValue(i,0),n.Cartesian3.pack(e._center,t,i),i+=n.Cartesian3.packedLength,n.Ellipsoid.pack(e._ellipsoid,t,i),i+=n.Ellipsoid.packedLength,y.VertexFormat.pack(e._vertexFormat,t,i),i+=y.VertexFormat.packedLength,t[i++]=e._semiMajorAxis,t[i++]=e._semiMinorAxis,t[i++]=e._rotation,t[i++]=e._stRotation,t[i++]=e._height,t[i++]=e._granularity,t[i++]=e._extrudedHeight,t[i++]=e._shadowVolume?1:0,t[i]=r.defaultValue(e._offsetAttribute,-1),t};const R=new n.Cartesian3,j=new n.Ellipsoid,B=new y.VertexFormat,z={center:R,ellipsoid:j,vertexFormat:B,semiMajorAxis:void 0,semiMinorAxis:void 0,rotation:void 0,stRotation:void 0,height:void 0,granularity:void 0,extrudedHeight:void 0,shadowVolume:void 0,offsetAttribute:void 0};L.unpack=function(e,t,i,a){t=r.defaultValue(t,0);const o=n.Cartesian3.unpack(e,t,R);t+=n.Cartesian3.packedLength;const s=n.Ellipsoid.unpack(e,t,j);t+=n.Ellipsoid.packedLength;const l=y.VertexFormat.unpack(e,t,B);t+=y.VertexFormat.packedLength;const u=e[t++],m=e[t++],c=e[t++],p=e[t++],d=e[t++],f=e[t++],h=e[t++],A=1===e[t++],x=e[t];return r.defined(i)?(i._center=n.Cartesian3.clone(o,i._center),i._ellipsoid=n.Ellipsoid.clone(s,i._ellipsoid),i._vertexFormat=y.VertexFormat.clone(l,i._vertexFormat),i._semiMajorAxis=u,i._semiMinorAxis=m,i._rotation=c,i._stRotation=p,i._height=d,i._granularity=f,i._extrudedHeight=h,i._shadowVolume=A,i._offsetAttribute=-1===x?void 0:x,i._planeView=r.defaultValue(a,!1),i):(z.height=d,z.extrudedHeight=h,z.granularity=f,z.stRotation=p,z.rotation=c,z.semiMajorAxis=u,z.semiMinorAxis=m,z.shadowVolume=A,z.offsetAttribute=-1===x?void 0:x,z.planeView=r.defaultValue(a,!1),new L(z))},L.computeRectangle=function(e,t){const i=(e=r.defaultValue(e,r.defaultValue.EMPTY_OBJECT)).center,a=r.defaultValue(e.ellipsoid,n.Ellipsoid.WGS84),o=e.semiMajorAxis,s=e.semiMinorAxis,l=r.defaultValue(e.granularity,d.CesiumMath.RADIANS_PER_DEGREE);return O(i,o,s,r.defaultValue(e.rotation,0),l,a,t,r.defaultValue(e.planeView,!1))},L.createGeometry=function(e){if(e._semiMajorAxis<=0||e._semiMinorAxis<=0)return;const i=e._planeView,l=e._height,u=e._extrudedHeight,c=!d.CesiumMath.equalsEpsilon(l,u,0,d.CesiumMath.EPSILON2);r.defined(i)&&!0===i||(e._center=e._ellipsoid.scaleToGeodeticSurface(e._center,e._center));const y={center:e._center,semiMajorAxis:e._semiMajorAxis,semiMinorAxis:e._semiMinorAxis,ellipsoid:e._ellipsoid,rotation:e._rotation,height:l,granularity:e._granularity,vertexFormat:e._vertexFormat,stRotation:e._stRotation,planeView:i};let f;if(c)y.extrudedHeight=u,y.shadowVolume=e._shadowVolume,y.offsetAttribute=e._offsetAttribute,f=S(y);else if(f=function(e){const i=e.center;v=n.Cartesian3.multiplyByScalar(e.ellipsoid.geodeticSurfaceNormal(i,v),e.height,v),v=n.Cartesian3.add(i,v,v);const a=new t.BoundingSphere(v,e.semiMajorAxis),r=o.EllipseGeometryLibrary.computeEllipsePositions(e,!0,!1),s=r.positions,l=r.numPts,u=G(s,e,!1);let m=P(l);return m=p.IndexDatatype.createTypedArray(s.length/3,m),{boundingSphere:a,attributes:u,indices:m}}(y),e._totalPositions=f.attributes.position.values.slice(),r.defined(e._offsetAttribute)){const t=f.attributes.position.values.length,i=e._offsetAttribute===m.GeometryOffsetAttribute.NONE?0:1,n=new Uint8Array(t/3).fill(i);f.attributes.applyOffset=new s.GeometryAttribute({componentDatatype:a.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:n})}return new s.Geometry({attributes:f.attributes,indices:f.indices,primitiveType:s.PrimitiveType.TRIANGLES,boundingSphere:f.boundingSphere,offsetAttribute:e._offsetAttribute})},L.createShadowVolume=function(e,t,i,n){const a=e._granularity,r=e._ellipsoid,o=t(a,r),s=i(a,r);return new L({center:e._center,semiMajorAxis:e._semiMajorAxis,semiMinorAxis:e._semiMinorAxis,ellipsoid:r,rotation:e._rotation,stRotation:e._stRotation,granularity:a,extrudedHeight:o,height:s,vertexFormat:y.VertexFormat.POSITION_ONLY,shadowVolume:!0,planeView:n})},Object.defineProperties(L.prototype,{rectangle:{get:function(){return r.defined(this._rectangle)||(this._rectangle=O(this._center,this._semiMajorAxis,this._semiMinorAxis,this._rotation,this._granularity,this._ellipsoid,void 0,this._planeView)),this._rectangle}},textureCoordinateRotationPoints:{get:function(){return r.defined(this._textureCoordinateRotationPoints)||(this._textureCoordinateRotationPoints=function(e){const t=-e._stRotation;if(0===t)return[0,0,0,1,1,0];const i=o.EllipseGeometryLibrary.computeEllipsePositions({center:e._center,semiMajorAxis:e._semiMajorAxis,semiMinorAxis:e._semiMinorAxis,rotation:e._rotation,granularity:e._granularity,planeView:e._planeView},!1,!0).outerPositions,a=i.length/3,r=new Array(a);for(let e=0;e<a;++e)r[e]=n.Cartesian3.fromArray(i,3*e);const l=e._ellipsoid,u=e.rectangle;return s.Geometry._textureCoordinateRotationPoints(r,t,l,u,e._planeView)}(this)),this._textureCoordinateRotationPoints}}}),e.EllipseGeometry=L}));
