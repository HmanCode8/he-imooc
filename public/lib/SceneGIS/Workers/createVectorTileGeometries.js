/**
 * @license
 * SceneGIS - https://github.com/CesiumGS/cesium
 * Version 1.97
 *
 * Copyright 2011-2022 SceneGIS Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/CesiumGS/cesium/blob/main/LICENSE.md for full licensing details.
 */
define(["./Transforms-c38817cd","./BoxGeometry-0994f4f6","./Matrix3-a45402cf","./Color-7a84f104","./CylinderGeometry-42056971","./defaultValue-192c850d","./EllipsoidGeometry-a14baa76","./IndexDatatype-1ff811be","./Matrix2-bce7772b","./createTaskProcessorWorker","./Math-be2c8494","./_commonjsHelpers-f78443cf","./combine-b9b48e3c","./RuntimeError-ca280330","./ComponentDatatype-f194b981","./WebGLConstants-1bcc99d3","./GeometryAttribute-add8522c","./GeometryAttributes-fcaeebba","./GeometryOffsetAttribute-817c59a7","./VertexFormat-d2271f13","./CylinderGeometryLibrary-8a5e156d"],(function(e,t,n,r,a,i,o,s,c,d,l,f,u,h,b,p,y,x,g,m,C){"use strict";function I(e){this.offset=e.offset,this.count=e.count,this.color=e.color,this.batchIds=e.batchIds}const M=new n.Cartesian3,k=c.Matrix4.packedLength+n.Cartesian3.packedLength,B=c.Matrix4.packedLength+2,w=c.Matrix4.packedLength+n.Cartesian3.packedLength,A=n.Cartesian3.packedLength+1,O={modelMatrix:new c.Matrix4,boundingVolume:new e.BoundingSphere};function L(e,t){let r=t*k;const a=n.Cartesian3.unpack(e,r,M);r+=n.Cartesian3.packedLength;const i=c.Matrix4.unpack(e,r,O.modelMatrix);c.Matrix4.multiplyByScale(i,a,i);const o=O.boundingVolume;return n.Cartesian3.clone(n.Cartesian3.ZERO,o.center),o.radius=Math.sqrt(3),O}function v(e,t){let r=t*B;const a=e[r++],i=e[r++],o=n.Cartesian3.fromElements(a,a,i,M),s=c.Matrix4.unpack(e,r,O.modelMatrix);c.Matrix4.multiplyByScale(s,o,s);const d=O.boundingVolume;return n.Cartesian3.clone(n.Cartesian3.ZERO,d.center),d.radius=Math.sqrt(2),O}function E(e,t){let r=t*w;const a=n.Cartesian3.unpack(e,r,M);r+=n.Cartesian3.packedLength;const i=c.Matrix4.unpack(e,r,O.modelMatrix);c.Matrix4.multiplyByScale(i,a,i);const o=O.boundingVolume;return n.Cartesian3.clone(n.Cartesian3.ZERO,o.center),o.radius=1,O}function U(e,t){let r=t*A;const a=e[r++],i=n.Cartesian3.unpack(e,r,M),o=c.Matrix4.fromTranslation(i,O.modelMatrix);c.Matrix4.multiplyByUniformScale(o,a,o);const s=O.boundingVolume;return n.Cartesian3.clone(n.Cartesian3.ZERO,s.center),s.radius=1,O}const G=new n.Cartesian3;function S(t,a,o,s,d){if(!i.defined(a))return;const l=o.length,f=s.attributes.position.values,u=s.indices,h=t.positions,b=t.vertexBatchIds,p=t.indices,y=t.batchIds,x=t.batchTableColors,g=t.batchedIndices,m=t.indexOffsets,C=t.indexCounts,M=t.boundingVolumes,k=t.modelMatrix,B=t.center;let w=t.positionOffset,A=t.batchIdIndex,O=t.indexOffset;const L=t.batchedIndicesOffset;for(let t=0;t<l;++t){const i=d(a,t),s=i.modelMatrix;c.Matrix4.multiply(k,s,s);const l=o[t],v=f.length;for(let e=0;e<v;e+=3){const t=n.Cartesian3.unpack(f,e,G);c.Matrix4.multiplyByPoint(s,t,t),n.Cartesian3.subtract(t,B,t),n.Cartesian3.pack(t,h,3*w+e),b[A++]=l}const E=u.length;for(let e=0;e<E;++e)p[O+e]=u[e]+w;const U=t+L;g[U]=new I({offset:O,count:E,color:r.Color.fromRgba(x[l]),batchIds:[l]}),y[U]=l,m[U]=O,C[U]=E,M[U]=e.BoundingSphere.transform(i.boundingVolume,s),w+=v/3,O+=E}t.positionOffset=w,t.batchIdIndex=A,t.indexOffset=O,t.batchedIndicesOffset+=l}const V=new n.Cartesian3,T=new c.Matrix4;function F(t,n,a){const i=a.length,o=2+i*e.BoundingSphere.packedLength+1+function(e){const t=e.length;let n=0;for(let a=0;a<t;++a)n+=r.Color.packedLength+3+e[a].batchIds.length;return n}(n),s=new Float64Array(o);let c=0;s[c++]=t,s[c++]=i;for(let t=0;t<i;++t)e.BoundingSphere.pack(a[t],s,c),c+=e.BoundingSphere.packedLength;const d=n.length;s[c++]=d;for(let e=0;e<d;++e){const t=n[e];r.Color.pack(t.color,s,c),c+=r.Color.packedLength,s[c++]=t.offset,s[c++]=t.count;const a=t.batchIds,i=a.length;s[c++]=i;for(let e=0;e<i;++e)s[c++]=a[e]}return s}return d((function(e,r){const d=i.defined(e.boxes)?new Float32Array(e.boxes):void 0,l=i.defined(e.boxBatchIds)?new Uint16Array(e.boxBatchIds):void 0,f=i.defined(e.cylinders)?new Float32Array(e.cylinders):void 0,u=i.defined(e.cylinderBatchIds)?new Uint16Array(e.cylinderBatchIds):void 0,h=i.defined(e.ellipsoids)?new Float32Array(e.ellipsoids):void 0,b=i.defined(e.ellipsoidBatchIds)?new Uint16Array(e.ellipsoidBatchIds):void 0,p=i.defined(e.spheres)?new Float32Array(e.spheres):void 0,y=i.defined(e.sphereBatchIds)?new Uint16Array(e.sphereBatchIds):void 0,x=i.defined(d)?l.length:0,g=i.defined(f)?u.length:0,m=i.defined(h)?b.length:0,C=i.defined(p)?y.length:0,I=t.BoxGeometry.getUnitBox(),M=a.CylinderGeometry.getUnitCylinder(),k=o.EllipsoidGeometry.getUnitEllipsoid(),B=I.attributes.position.values,w=M.attributes.position.values,A=k.attributes.position.values;let O=B.length*x;O+=w.length*g,O+=A.length*(m+C);const G=I.indices,R=M.indices,Z=k.indices;let D=G.length*x;D+=R.length*g,D+=Z.length*(m+C);const P=new Float32Array(O),_=new Uint16Array(O/3),q=s.IndexDatatype.createTypedArray(O/3,D),W=x+g+m+C,j=new Uint16Array(W),H=new Array(W),N=new Uint32Array(W),Y=new Uint32Array(W),z=new Array(W);!function(e){const t=new Float64Array(e);let r=0;n.Cartesian3.unpack(t,r,V),r+=n.Cartesian3.packedLength,c.Matrix4.unpack(t,r,T)}(e.packedBuffer);const J={batchTableColors:new Uint32Array(e.batchTableColors),positions:P,vertexBatchIds:_,indices:q,batchIds:j,batchedIndices:H,indexOffsets:N,indexCounts:Y,boundingVolumes:z,positionOffset:0,batchIdIndex:0,indexOffset:0,batchedIndicesOffset:0,modelMatrix:T,center:V};S(J,d,l,I,L),S(J,f,u,M,v),S(J,h,b,k,E),S(J,p,y,k,U);const K=F(q.BYTES_PER_ELEMENT,H,z);return r.push(P.buffer,_.buffer,q.buffer),r.push(j.buffer,N.buffer,Y.buffer),r.push(K.buffer),{positions:P.buffer,vertexBatchIds:_.buffer,indices:q.buffer,indexOffsets:N.buffer,indexCounts:Y.buffer,batchIds:j.buffer,packedBuffer:K.buffer}}))}));
