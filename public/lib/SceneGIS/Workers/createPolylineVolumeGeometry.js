/**
 * @license
 * SceneGIS - https://github.com/CesiumGS/cesium
 * Version 1.97
 *
 * Copyright 2011-2022 SceneGIS Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/CesiumGS/cesium/blob/main/LICENSE.md for full licensing details.
 */
define(["./defaultValue-192c850d","./Matrix3-a45402cf","./arrayRemoveDuplicates-0aca867d","./BoundingRectangle-17f7fc59","./Transforms-c38817cd","./Matrix2-bce7772b","./ComponentDatatype-f194b981","./PolylineVolumeGeometryLibrary-797498c4","./GeometryAttribute-add8522c","./GeometryAttributes-fcaeebba","./GeometryPipeline-be1ab56a","./IndexDatatype-1ff811be","./Math-be2c8494","./PolygonPipeline-2888ea37","./VertexFormat-d2271f13","./_commonjsHelpers-f78443cf","./combine-b9b48e3c","./RuntimeError-ca280330","./WebGLConstants-1bcc99d3","./EllipsoidTangentPlane-b1a9b8da","./AxisAlignedBoundingBox-e6370b82","./IntersectionTests-f861e6a9","./Plane-f4b01105","./PolylinePipeline-1de62483","./EllipsoidGeodesic-35356ee4","./EllipsoidRhumbLine-c951aea3","./AttributeCompression-cb62dc59","./EncodedCartesian3-43036f0c"],(function(e,t,n,o,i,a,r,l,s,c,p,d,u,m,y,g,f,h,b,P,_,E,k,v,V,x,L,C){"use strict";function F(n){const o=(n=e.defaultValue(n,e.defaultValue.EMPTY_OBJECT)).polylinePositions,i=n.shapePositions;this._positions=o,this._shape=i,this._ellipsoid=t.Ellipsoid.clone(e.defaultValue(n.ellipsoid,t.Ellipsoid.WGS84)),this._cornerType=e.defaultValue(n.cornerType,l.CornerType.ROUNDED),this._vertexFormat=y.VertexFormat.clone(e.defaultValue(n.vertexFormat,y.VertexFormat.DEFAULT)),this._granularity=e.defaultValue(n.granularity,u.CesiumMath.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeGeometry";let r=1+o.length*t.Cartesian3.packedLength;r+=1+i.length*a.Cartesian2.packedLength,this.packedLength=r+t.Ellipsoid.packedLength+y.VertexFormat.packedLength+2}F.pack=function(n,o,i){let r;i=e.defaultValue(i,0);const l=n._positions;let s=l.length;for(o[i++]=s,r=0;r<s;++r,i+=t.Cartesian3.packedLength)t.Cartesian3.pack(l[r],o,i);const c=n._shape;for(s=c.length,o[i++]=s,r=0;r<s;++r,i+=a.Cartesian2.packedLength)a.Cartesian2.pack(c[r],o,i);return t.Ellipsoid.pack(n._ellipsoid,o,i),i+=t.Ellipsoid.packedLength,y.VertexFormat.pack(n._vertexFormat,o,i),i+=y.VertexFormat.packedLength,o[i++]=n._cornerType,o[i]=n._granularity,o};const A=t.Ellipsoid.clone(t.Ellipsoid.UNIT_SPHERE),T=new y.VertexFormat,G={polylinePositions:void 0,shapePositions:void 0,ellipsoid:A,vertexFormat:T,cornerType:void 0,granularity:void 0};F.unpack=function(n,o,i){let r;o=e.defaultValue(o,0);let l=n[o++];const s=new Array(l);for(r=0;r<l;++r,o+=t.Cartesian3.packedLength)s[r]=t.Cartesian3.unpack(n,o);l=n[o++];const c=new Array(l);for(r=0;r<l;++r,o+=a.Cartesian2.packedLength)c[r]=a.Cartesian2.unpack(n,o);const p=t.Ellipsoid.unpack(n,o,A);o+=t.Ellipsoid.packedLength;const d=y.VertexFormat.unpack(n,o,T);o+=y.VertexFormat.packedLength;const u=n[o++],m=n[o];return e.defined(i)?(i._positions=s,i._shape=c,i._ellipsoid=t.Ellipsoid.clone(p,i._ellipsoid),i._vertexFormat=y.VertexFormat.clone(d,i._vertexFormat),i._cornerType=u,i._granularity=m,i):(G.polylinePositions=s,G.shapePositions=c,G.cornerType=u,G.granularity=m,new F(G))};const D=new o.BoundingRectangle;return F.createGeometry=function(e){const a=e._positions,u=n.arrayRemoveDuplicates(a,t.Cartesian3.equalsEpsilon);let y=e._shape;if(y=l.PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(y),u.length<2||y.length<3)return;m.PolygonPipeline.computeWindingOrder2D(y)===m.WindingOrder.CLOCKWISE&&y.reverse();const g=o.BoundingRectangle.fromPoints(y,D);return function(e,t,n,o){const a=new c.GeometryAttributes;o.position&&(a.position=new s.GeometryAttribute({componentDatatype:r.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e}));const u=t.length,y=e.length/3,g=(y-2*u)/(2*u),f=m.PolygonPipeline.triangulate(t),h=(g-1)*u*6+2*f.length,b=d.IndexDatatype.createTypedArray(y,h);let P,_,E,k,v,V;const x=2*u;let L=0;for(P=0;P<g-1;P++){for(_=0;_<u-1;_++)E=2*_+P*u*2,V=E+x,k=E+1,v=k+x,b[L++]=k,b[L++]=E,b[L++]=v,b[L++]=v,b[L++]=E,b[L++]=V;E=2*u-2+P*u*2,k=E+1,v=k+x,V=E+x,b[L++]=k,b[L++]=E,b[L++]=v,b[L++]=v,b[L++]=E,b[L++]=V}if(o.st||o.tangent||o.bitangent){const e=new Float32Array(2*y),o=1/(g-1),i=1/n.height,l=n.height/2;let c,p,d=0;for(P=0;P<g;P++){for(c=P*o,p=i*(t[0].y+l),e[d++]=c,e[d++]=p,_=1;_<u;_++)p=i*(t[_].y+l),e[d++]=c,e[d++]=p,e[d++]=c,e[d++]=p;p=i*(t[0].y+l),e[d++]=c,e[d++]=p}for(_=0;_<u;_++)c=0,p=i*(t[_].y+l),e[d++]=c,e[d++]=p;for(_=0;_<u;_++)c=(g-1)*o,p=i*(t[_].y+l),e[d++]=c,e[d++]=p;a.st=new s.GeometryAttribute({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:new Float32Array(e)})}const C=y-2*u;for(P=0;P<f.length;P+=3){const e=f[P]+C,t=f[P+1]+C,n=f[P+2]+C;b[L++]=e,b[L++]=t,b[L++]=n,b[L++]=n+u,b[L++]=t+u,b[L++]=e+u}let F=new s.Geometry({attributes:a,indices:b,boundingSphere:i.BoundingSphere.fromVertices(e),primitiveType:s.PrimitiveType.TRIANGLES});if(o.normal&&(F=p.GeometryPipeline.computeNormal(F)),o.tangent||o.bitangent){try{F=p.GeometryPipeline.computeTangentAndBitangent(F)}catch(e){l.oneTimeWarning("polyline-volume-tangent-bitangent","Unable to compute tangents and bitangents for polyline volume geometry")}o.tangent||(F.attributes.tangent=void 0),o.bitangent||(F.attributes.bitangent=void 0),o.st||(F.attributes.st=void 0)}return F}(l.PolylineVolumeGeometryLibrary.computePositions(u,y,g,e,!0),y,g,e._vertexFormat)},function(n,o){return e.defined(o)&&(n=F.unpack(n,o)),n._ellipsoid=t.Ellipsoid.clone(n._ellipsoid),F.createGeometry(n)}}));
