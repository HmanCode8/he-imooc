/**
 * @license
 * SceneGIS - https://github.com/CesiumGS/cesium
 * Version 1.97
 *
 * Copyright 2011-2022 SceneGIS Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/CesiumGS/cesium/blob/main/LICENSE.md for full licensing details.
 */
define(["exports","./Matrix3-a45402cf","./defaultValue-192c850d","./EllipsoidGeodesic-35356ee4","./EllipsoidRhumbLine-c951aea3","./IntersectionTests-f861e6a9","./Math-be2c8494","./Matrix2-bce7772b","./Plane-f4b01105"],(function(e,t,a,n,i,r,o,s,c){"use strict";const l={numberOfPoints:function(e,a,n){const i=t.Cartesian3.distance(e,a);return Math.ceil(i/n)},numberOfPointsRhumbLine:function(e,t,a){const n=Math.pow(e.longitude-t.longitude,2)+Math.pow(e.latitude-t.latitude,2);return Math.max(1,Math.ceil(Math.sqrt(n/(a*a))))}},u=new t.Cartographic;l.extractHeights=function(e,t,n){const i=e.length,r=new Array(i);for(let o=0;o<i;o++){const i=e[o];a.defined(n)&&!0===n?r[o]=i.z:r[o]=t.cartesianToCartographic(i,u).height}return r};const h=new s.Matrix4,f=new t.Cartesian3,g=new t.Cartesian3,d=new c.Plane(t.Cartesian3.UNIT_X,0),C=new t.Cartesian3,p=new c.Plane(t.Cartesian3.UNIT_X,0),m=new t.Cartesian3,w=new t.Cartesian3,y=[];function P(e,t,a){const n=y;let i;if(n.length=e,t===a){for(i=0;i<e;i++)n[i]=t;return n}const r=(a-t)/e;for(i=0;i<e;i++){const e=t+i*r;n[i]=e}return n}const T=new t.Cartographic,A=new t.Cartographic,b=new t.Cartesian3,E=new t.Cartesian3,M=new t.Cartesian3,x=new n.EllipsoidGeodesic;let R=new i.EllipsoidRhumbLine;function S(e,n,i,r,o,s,c,u,h){let f,g,d=new t.Cartographic,C=new t.Cartographic;a.defined(h)&&!0===h?(f=e.clone(E),g=n.clone(M),d.longitude=f.x,d.latitude=f.y,d.height=f.z,C.longitude=g.x,C.latitude=g.y,C.height=g.z):(f=r.scaleToGeodeticSurface(e,E),g=r.scaleToGeodeticSurface(n,M),d=r.cartesianToCartographic(f,T),C=r.cartesianToCartographic(g,A));const p=l.numberOfPoints(e,n,i),m=P(p,o,s);x.setEndPoints(d,C);const w=x.surfaceDistance/p;let y,R=u;d.height=o,a.defined(h)&&!0===h?(y=f.clone(b),y.z=o):y=r.cartographicToCartesian(d,b),t.Cartesian3.pack(y,c,R),R+=3;for(let e=1;e<p;e++){const a=x.interpolateUsingSurfaceDistance(e*w,A);a.height=m[e],!0===h?(y.x=a.longitude,y.y=a.latitude,y.z=a.height):y=r.cartographicToCartesian(a,b),t.Cartesian3.pack(y,c,R),R+=3}return R}function D(e,a,n,r,o,s,c,u){const h=r.cartesianToCartographic(e,T),f=r.cartesianToCartographic(a,A),g=l.numberOfPointsRhumbLine(h,f,n);h.height=0,f.height=0;const d=P(g,o,s);R.ellipsoid.equals(r)||(R=new i.EllipsoidRhumbLine(void 0,void 0,r)),R.setEndPoints(h,f);const C=R.surfaceDistance/g;let p=u;h.height=o;let m=r.cartographicToCartesian(h,b);t.Cartesian3.pack(m,c,p),p+=3;for(let e=1;e<g;e++){const a=R.interpolateUsingSurfaceDistance(e*C,A);a.height=d[e],m=r.cartographicToCartesian(a,b),t.Cartesian3.pack(m,c,p),p+=3}return p}l.wrapLongitude=function(e,n){const i=[],o=[];if(a.defined(e)&&e.length>0){n=a.defaultValue(n,s.Matrix4.IDENTITY);const l=s.Matrix4.inverseTransformation(n,h),u=s.Matrix4.multiplyByPoint(l,t.Cartesian3.ZERO,f),y=t.Cartesian3.normalize(s.Matrix4.multiplyByPointAsVector(l,t.Cartesian3.UNIT_Y,g),g),P=c.Plane.fromPointNormal(u,y,d),T=t.Cartesian3.normalize(s.Matrix4.multiplyByPointAsVector(l,t.Cartesian3.UNIT_X,C),C),A=c.Plane.fromPointNormal(u,T,p);let b=1;i.push(t.Cartesian3.clone(e[0]));let E=i[0];const M=e.length;for(let n=1;n<M;++n){const s=e[n];if(c.Plane.getPointDistance(A,E)<0||c.Plane.getPointDistance(A,s)<0){const e=r.IntersectionTests.lineSegmentPlane(E,s,P,m);if(a.defined(e)){const a=t.Cartesian3.multiplyByScalar(y,5e-9,w);c.Plane.getPointDistance(P,E)<0&&t.Cartesian3.negate(a,a),i.push(t.Cartesian3.add(e,a,new t.Cartesian3)),o.push(b+1),t.Cartesian3.negate(a,a),i.push(t.Cartesian3.add(e,a,new t.Cartesian3)),b=1}}i.push(t.Cartesian3.clone(e[n])),b++,E=s}o.push(b)}return{positions:i,lengths:o}},l.generateArc=function(e){a.defined(e)||(e={});const n=e.positions,i=a.defaultValue(e.planeView,!1),r=n.length,s=a.defaultValue(e.ellipsoid,t.Ellipsoid.WGS84);let c=a.defaultValue(e.height,0);const u=Array.isArray(c);if(r<1)return[];if(1===r){let e;if(e=!0===i?n[0].clone(E):s.scaleToGeodeticSurface(n[0],E),c=u?c[0]:c,0!==c){let a;!0===i?(a=new t.Cartesian3(0,0,1),a.clone(b)):a=s.geodeticSurfaceNormal(e,b),t.Cartesian3.multiplyByScalar(a,c,a),t.Cartesian3.add(e,a,e)}return[e.x,e.y,e.z]}let h=e.minDistance;if(!a.defined(h)){const t=a.defaultValue(e.granularity,o.CesiumMath.RADIANS_PER_DEGREE);h=o.CesiumMath.chordLength(t,s.maximumRadius)}let f,g=0;for(f=0;f<r-1;f++)g+=l.numberOfPoints(n[f],n[f+1],h);const d=3*(g+1),C=new Array(d);let p=0;for(f=0;f<r-1;f++){p=S(n[f],n[f+1],h,s,u?c[f]:c,u?c[f+1]:c,C,p,i)}y.length=0;const m=n[r-1];let w;if(a.defined(i)&&!0===i)w=m.clone(b),w.z=u?c[r-1]:c;else{const e=s.cartesianToCartographic(m,T);e.height=u?c[r-1]:c,w=s.cartographicToCartesian(e,b)}return t.Cartesian3.pack(w,C,d-3),C};const V=new t.Cartographic,N=new t.Cartographic;l.generateRhumbArc=function(e){a.defined(e)||(e={});const n=e.positions,i=n.length,r=a.defaultValue(e.ellipsoid,t.Ellipsoid.WGS84);let s=a.defaultValue(e.height,0);const c=Array.isArray(s);if(i<1)return[];if(1===i){const e=r.scaleToGeodeticSurface(n[0],E);if(s=c?s[0]:s,0!==s){const a=r.geodeticSurfaceNormal(e,b);t.Cartesian3.multiplyByScalar(a,s,a),t.Cartesian3.add(e,a,e)}return[e.x,e.y,e.z]}const u=a.defaultValue(e.granularity,o.CesiumMath.RADIANS_PER_DEGREE);let h,f,g=0,d=r.cartesianToCartographic(n[0],V);for(h=0;h<i-1;h++)f=r.cartesianToCartographic(n[h+1],N),g+=l.numberOfPointsRhumbLine(d,f,u),d=t.Cartographic.clone(f,V);const C=3*(g+1),p=new Array(C);let m=0;for(h=0;h<i-1;h++){m=D(n[h],n[h+1],u,r,c?s[h]:s,c?s[h+1]:s,p,m)}y.length=0;const w=n[i-1],P=r.cartesianToCartographic(w,T);P.height=c?s[i-1]:s;const A=r.cartographicToCartesian(P,b);return t.Cartesian3.pack(A,p,C-3),p},l.generateCartesianArc=function(e){const a=l.generateArc(e),n=a.length/3,i=new Array(n);for(let e=0;e<n;e++)i[e]=t.Cartesian3.unpack(a,3*e);return i},l.generateCartesianRhumbArc=function(e){const a=l.generateRhumbArc(e),n=a.length/3,i=new Array(n);for(let e=0;e<n;e++)i[e]=t.Cartesian3.unpack(a,3*e);return i};var z=l;e.PolylinePipeline=z}));
